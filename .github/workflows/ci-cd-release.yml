name: CI/CD - Build, Test & Release to NuGet

# This workflow:
# - Builds and tests on every push/PR
# - Publishes to NuGet.org ONLY when a version tag (v*.*.*)  is pushed
# - Creates GitHub releases for version tags
#
# To release: git tag v2.1.1 && git push origin v2.1.1

on:
  push:
    branches: [main, develop]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]

permissions:
  contents: write # Required for creating GitHub releases
  packages: write # Required for publishing packages (if using GitHub Packages)

env:
  DOTNET_VERSION_8: "8.0.x"
  DOTNET_VERSION_9: "9.0.x"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
  DOTNET_CLI_TELEMETRY_OPTOUT: "true"

jobs:
  build-and-test:
    name: Build & Test (runs on all pushes/PRs)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for GitVersion

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            ${{ env.DOTNET_VERSION_8 }}
            ${{ env.DOTNET_VERSION_9 }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: Display Version
        run: |
          echo "Version: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "Semantic Version: ${{ steps.gitversion.outputs.semVer }}"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore /p:Version=${{ steps.gitversion.outputs.nuGetVersionV2 }} /p:ContinuousIntegrationBuild=true

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Pack NuGet packages
        run: |
          dotnet pack src/MarkdownToRazor/MarkdownToRazor.csproj --configuration Release --no-build --output ./packages /p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }} /p:ContinuousIntegrationBuild=true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./packages/*.nupkg

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: ./coverage/**/*.xml

  publish-to-nuget:
    name: Publish to NuGet (only on version tags)
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./packages

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            ${{ env.DOTNET_VERSION_8 }}
            ${{ env.DOTNET_VERSION_9 }}

      - name: Publish to NuGet.org
        if: startsWith(github.ref, 'refs/tags/v') # Only publishes when a version tag is pushed
        run: |
          echo "ðŸš€ Publishing to NuGet.org because tag ${{ github.ref_name }} was pushed"
          for pkg in ./packages/*.nupkg; do
            echo "Publishing $pkg to NuGet.org"
            dotnet nuget push "$pkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
          done

      - name: Create GitHub Release (for tags)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          body: |
            ## Changes in this Release

            See the [CHANGELOG.md](CHANGELOG.md) for details.

            ## NuGet Package

            The following package has been published to **NuGet.org**:

            ### ðŸ“¦ **Install from NuGet.org:**
            ```bash
            dotnet add package MarkdownToRazor
            ```

            ## Package Description

            - **`MarkdownToRazor`** - Complete solution for converting Markdown files to Blazor Razor pages with runtime components, build-time code generation, and MSBuild integration

            ## Installation & Usage

            See [README.md](README.md) for complete installation and usage instructions.
